input(program)

program = ast.node($"program", maybe_array_sep(node_or_malformed(nl), w))

node =
  ast.with_operator_precedence(
    surround(operand, w),
    surround(prefix, w),
    surround(infix, w),
    surround(postfix, w),
  ) |
  surround(doc_comment, w) |
  surround(comment, w)

node_or_malformed(sync_point) = node | malformed(sync_point)

malformed(sync_point) = ast.node($"malformed", chars_until(sync_point))

operand = group | number | character | var

prefix =
  ("-" $ Ast.Precedence({"type": "negate"}, 3))

infix =
  ("." $ Ast.InfixPrecedence({"type": "method_access"}, 4, 4.5)) |
  (`%` $ Ast.InfixPrecedence({"type": "modulo"},        2, 2.5)) |
  ("*" $ Ast.InfixPrecedence({"type": "multiply"},      2, 2.5)) |
  ("/" $ Ast.InfixPrecedence({"type": "divide"},        2, 2.5)) |
  ("+" $ Ast.InfixPrecedence({"type": "add"},           1, 1.5)) |
  ("-" $ Ast.InfixPrecedence({"type": "subtract"},      1, 1.5))

postfix =
  (function_call -> Node $ Ast.Precedence(Node, 6)) |
  (block         -> Node $ Ast.Precedence(Node, 5))

function_call = ast.node(
  $"function_call",
  "(" > w >
  maybe_array_sep(node_or_malformed("," | ")" | nl), ",")
  < w < ")"
)

block = ast.node(
  $"block",
  "{" > w >
  maybe_array_sep(node_or_malformed("}" | nl), w)
  < w < "}"
)

group =
  "(" > w >
  node_or_malformed(")" | nl)
  < w < ")"

number = invalid_number | integer

integer = ast.node($"int", int)

invalid_number = ast.node($"invalid_number", float)

character = ast.node($"char", "'" > char < "'")

var = ast.node($"var", var_id)

var_id = maybe("@") + alpha + maybe(word)

w = maybe_many(whitespace)

doc_comment = "##" > w > ast.node(
  $"doc_comment",
  tuple2_sep(doc_comment_key, w > ":" < w, template_string)
)

doc_comment_key = doc_comment_var | doc_comment_property

doc_comment_var = "var" > w > ast.node($"doc_comment_var", var_id)

doc_comment_property = ast.node($"doc_comment_property", word)

comment = "#" > ast.node($"comment", chars_until(nl))

template_string = ast.node(
  $"template_string",
  array(template_var_segment | template_string_segment),
)

template_var_segment = ast.node($"template_var_segment", "{" > var_id < "}")

template_string_segment =
  ast.node($"template_string_segment", chars_until("{" | nl))
