ws > program < ws < end

program = array_sep(act, ws) -> Acts $ { "type": "program", "acts": Acts }

act =
  label_id -> ActId & ws & "{" & ws &
  maybe_array_sep(scene, ws) -> Scenes & ws & "}" $
  { "type": "act", "actId": ActId, "scenes": Scenes }

scene =
  label_id -> SceneId & ws & "{" & ws &
  maybe_array_sep(direction, ws) -> Directions & ws & "}" $
  { "type": "scene", "sceneId": SceneId, "directions": Directions }

direction = dialogue | presence

dialogue =
  var_id -> SpeakerVarId & "." & "{" & ws &
  maybe_array_sep(statement, ws) -> Lines & ws & "}" $
  { "type": "dialogue", "speakerVarId": SpeakerVarId, "lines": Lines }

presence = stage | unstage | unstage_all

statement = set | print | read | test | if | goto | push | pop

expression = group | arithmetic | const | var

arithmetic =
  group | const | var -> Left & ws &
  "+" | "-" | "/" | "*" | "%" -> Op & ws &
  arithmetic | group | const | var -> Right $
  { "type": "arithmetic", "left": Left, "op": Op, "right": Right }

group = "(" > ws > expression < ws < ")"

const = integer | character

integer = int -> Int $ { "type": "int", "value": Int }

character = "'" > char < "'" -> Char $ { "type": "char", "value": Char }

set =
  var_id -> VarId & ".set" & "(" & ws &
  expression -> Value & ws & ")" $
  { "type": ".set", "varId": VarId, "value": Value }

test =
  test_type("test_eq") |
  test_type("test_gt") |
  test_type("test_lt") |
  test_type("test_not_eq") |
  test_type("test_not_gt") |
  test_type("test_not_lt")

test_type(type) =
  type -> Type & "(" & ws &
  expression -> Left & ws &
  "," & ws &
  expression -> Right & ws &
  ")" $
  { "type": Type, "left": Left, "right": Right }

if =
  boolean("if_true", "if_false") -> Is & "(" & ws &
  statement -> Then & ws & ")" $
  { "type": "if", "is": Is, "then": Then }

goto =
  "goto" & "(" & ws &
  label_id -> LabelId & ws &
  ")" $
  { "type": "goto", "labelId": LabelId }

print = print_char | print_int

read = read_char | read_int

print_char = method0(".print_char")

print_int = method0(".print_int")

read_char = method0(".read_char")

read_int = method0(".read_int")

push = method0(".push")

pop = method0(".pop")

method0(type) =
  var_id -> VarId & type -> Type & optional_parens $
  { "type": Type, "varId": VarId }

stage =
  "stage" & "(" & ws &
  var_id -> VarId1 &
  maybe(ws > "," > ws > var_id) -> VarId2 & ws & ")" $
  { "type": "stage", "varId1": VarId1, "varId2": VarId2 }

unstage =
  "unstage" & "(" & ws &
  var_id -> VarId1 &
  maybe(ws > "," > ws > var_id) -> VarId2 & ws & ")" $
  { "type": "unstage", "varId1": VarId1, "varId2": VarId2 }

unstage_all = "unstage_all" & optional_parens $ { "type": "unstage_all" }

optional_parens = maybe("(" > ws < ")")

label_id = peek(upper) > many(alpha | digit)

var = var_id -> Id $ { "type": "var", "id": Id }

var_id = peek(lower) > many(alpha | digit)

ws = maybe_many(whitespace | comment)

comment = "#" > many_until(char, nl) < ws
